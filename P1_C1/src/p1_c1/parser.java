
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 04 09:30:30 CST 2017
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 04 09:30:30 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\015\013\000\002\002\004\000\002\015" +
    "\013\000\002\015\013\000\002\015\012\000\002\016\003" +
    "\000\002\016\003\000\002\016\002\000\002\012\011\000" +
    "\002\013\007\000\002\021\012\000\002\005\015\000\002" +
    "\005\011\000\002\004\011\000\002\014\006\000\002\014" +
    "\010\000\002\014\010\000\002\014\010\000\002\014\010" +
    "\000\002\014\002\000\002\010\007\000\002\010\007\000" +
    "\002\011\006\000\002\011\004\000\002\011\002\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\003\005\000\002\003\002\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\006\016\007\034\uffdd\001\002\000\004\034" +
    "\013\001\002\000\004\005\011\001\002\000\004\002\010" +
    "\001\002\000\004\005\uffdc\001\002\000\004\002\000\001" +
    "\002\000\004\013\012\001\002\000\004\034\uffde\001\002" +
    "\000\004\020\014\001\002\000\004\021\015\001\002\000" +
    "\004\022\016\001\002\000\020\005\017\013\uffe9\014\uffe9" +
    "\015\uffe9\023\uffe9\031\uffe9\033\uffe9\001\002\000\004\006" +
    "\137\001\002\000\016\013\022\014\031\015\026\023\ufffa" +
    "\031\025\033\021\001\002\000\004\020\104\001\002\000" +
    "\016\013\uffea\014\uffea\015\uffea\023\uffea\031\uffea\033\uffea" +
    "\001\002\000\010\014\031\015\026\023\ufffa\001\002\000" +
    "\010\014\031\015\026\023\ufffa\001\002\000\004\020\051" +
    "\001\002\000\004\020\045\001\002\000\010\014\031\015" +
    "\026\023\ufffa\001\002\000\004\023\ufffc\001\002\000\004" +
    "\020\035\001\002\000\004\023\034\001\002\000\004\023" +
    "\ufffb\001\002\000\004\002\ufffd\001\002\000\002\001\002" +
    "\000\004\005\037\001\002\000\002\001\002\000\004\021" +
    "\041\001\002\000\004\013\042\001\002\000\004\023\ufff9" +
    "\001\002\000\004\023\044\001\002\000\004\002\ufffe\001" +
    "\002\000\004\004\046\001\002\000\004\021\047\001\002" +
    "\000\004\013\050\001\002\000\004\023\ufff8\001\002\000" +
    "\004\020\053\001\002\000\004\021\070\001\002\000\004" +
    "\005\054\001\002\000\016\017\060\024\057\025\056\026" +
    "\063\027\061\030\062\001\002\000\006\004\064\005\065" +
    "\001\002\000\006\004\uffe0\005\uffe0\001\002\000\006\004" +
    "\uffdf\005\uffdf\001\002\000\006\004\uffe4\005\uffe4\001\002" +
    "\000\006\004\uffe1\005\uffe1\001\002\000\006\004\uffe3\005" +
    "\uffe3\001\002\000\006\004\uffe2\005\uffe2\001\002\000\004" +
    "\021\067\001\002\000\004\021\066\001\002\000\004\021" +
    "\uffed\001\002\000\004\021\uffec\001\002\000\004\022\071" +
    "\001\002\000\010\005\017\013\uffe9\023\uffe9\001\002\000" +
    "\006\013\022\023\073\001\002\000\012\014\ufff5\015\ufff5" +
    "\023\ufff5\032\074\001\002\000\004\022\075\001\002\000" +
    "\010\005\017\013\uffe9\023\uffe9\001\002\000\006\013\022" +
    "\023\077\001\002\000\010\014\ufff6\015\ufff6\023\ufff6\001" +
    "\002\000\004\023\101\001\002\000\004\002\001\001\002" +
    "\000\004\023\103\001\002\000\004\002\uffff\001\002\000" +
    "\004\020\053\001\002\000\004\021\106\001\002\000\004" +
    "\022\107\001\002\000\010\005\111\023\uffee\031\uffee\001" +
    "\002\000\006\023\135\031\025\001\002\000\004\006\112" +
    "\001\002\000\006\004\113\005\114\001\002\000\014\007" +
    "\117\010\115\011\120\012\121\013\127\001\002\000\012" +
    "\007\117\010\115\011\120\012\121\001\002\000\006\004" +
    "\uffe7\005\uffe7\001\002\000\006\004\122\005\123\001\002" +
    "\000\006\004\uffe8\005\uffe8\001\002\000\006\004\uffe6\005" +
    "\uffe6\001\002\000\006\004\uffe5\005\uffe5\001\002\000\004" +
    "\013\125\001\002\000\004\013\124\001\002\000\006\023" +
    "\ufff2\031\ufff2\001\002\000\006\023\ufff1\031\ufff1\001\002" +
    "\000\006\004\130\005\131\001\002\000\006\023\ufff3\031" +
    "\ufff3\001\002\000\004\013\133\001\002\000\004\013\132" +
    "\001\002\000\006\023\uffef\031\uffef\001\002\000\006\023" +
    "\ufff0\031\ufff0\001\002\000\004\023\136\001\002\000\010" +
    "\014\ufff4\015\ufff4\023\ufff4\001\002\000\010\014\ufff7\015" +
    "\ufff7\023\ufff7\001\002\000\004\004\140\001\002\000\004" +
    "\013\141\001\002\000\016\013\uffeb\014\uffeb\015\uffeb\023" +
    "\uffeb\031\uffeb\033\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\010\002\004\003\003\015\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\017\001\001\000\002\001\001\000\016\004" +
    "\023\005\022\012\027\013\032\016\031\021\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\027\013" +
    "\032\016\101\001\001\000\010\012\027\013\032\016\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\027\013\032\016\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\035\001\001\000\002\001\001\000\004" +
    "\020\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\107\001\001\000\004\005\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\125\001" +
    "\001\000\004\006\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/*Generador gen = new Generador();
public void annadeSym(int simbolo)
{
    this.gen.AddDOVarToPile(simbolo + "");
}*/


//este m√©todo sirve para el manejo de errores provisto por CUP :D
/*public void syntax_error(Symbol s)
{
     report_error("Error de sintaxis Linea: "+Integer.toString(Yylex.linea)+" Columna: "+Integer.toString(Yylex.pos+1)+" En \""+s.value+"\"",null);
}*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_DATO_IDENTIFICADOR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_IDENTIFICADOR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_DATO_IDENTIFICADOR ::= TIPO_DATO IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_IDENTIFICADOR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OpeRELACIONAL_LOGICA ::= OROR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpeRELACIONAL_LOGICA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OpeRELACIONAL_LOGICA ::= ANDAND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpeRELACIONAL_LOGICA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OpeRELACIONAL_LOGICA ::= MINOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpeRELACIONAL_LOGICA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OpeRELACIONAL_LOGICA ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpeRELACIONAL_LOGICA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OpeRELACIONAL_LOGICA ::= EQUEQU 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpeRELACIONAL_LOGICA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OpeRELACIONAL_LOGICA ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpeRELACIONAL_LOGICA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OpeARIMETICA ::= DIVI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpeARIMETICA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OpeARIMETICA ::= MULTI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpeARIMETICA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OpeARIMETICA ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpeARIMETICA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OpeARIMETICA ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpeARIMETICA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IDENTIFICADOR_ASIG_NUMERO ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_ASIG_NUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IDENTIFICADOR_ASIG_NUMERO ::= IDENTIFICADOR_ASIG_NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_ASIG_NUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IDENTIFICADOR_ASIG_NUMERO ::= IDENTIFICADOR ASIGNADOR NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_ASIG_NUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OP_RELACIONAL_LOGICO ::= PARENT_AB IDENTIFICADOR OpeRELACIONAL_LOGICA NUMERO PARENT_CE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL_LOGICO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OP_RELACIONAL_LOGICO ::= PARENT_AB IDENTIFICADOR OpeRELACIONAL_LOGICA IDENTIFICADOR PARENT_CE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL_LOGICO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IDENTIFICADOR_ASIG_NUMERO_OP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_ASIG_NUMERO_OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IDENTIFICADOR_ASIG_NUMERO_OP ::= IDENTIFICADOR ASIGNADOR NUMERO OpeARIMETICA IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_ASIG_NUMERO_OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IDENTIFICADOR_ASIG_NUMERO_OP ::= IDENTIFICADOR ASIGNADOR NUMERO OpeARIMETICA NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_ASIG_NUMERO_OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IDENTIFICADOR_ASIG_NUMERO_OP ::= IDENTIFICADOR ASIGNADOR IDENTIFICADOR OpeARIMETICA NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_ASIG_NUMERO_OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IDENTIFICADOR_ASIG_NUMERO_OP ::= IDENTIFICADOR ASIGNADOR IDENTIFICADOR OpeARIMETICA IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_ASIG_NUMERO_OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IDENTIFICADOR_ASIG_NUMERO_OP ::= IDENTIFICADOR ASIGNADOR NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_ASIG_NUMERO_OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE_WHILE ::= WHILE PARENT_AB OP_RELACIONAL_LOGICO PARENT_CE LLAB_AB IDENTIFICADOR_ASIG_NUMERO_OP LLAB_CE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE_IF ::= IF PARENT_AB OP_RELACIONAL_LOGICO PARENT_CE LLAB_AB IDENTIFICADOR_ASIG_NUMERO LLAB_CE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQUE_IF ::= IF PARENT_AB OP_RELACIONAL_LOGICO PARENT_CE LLAB_AB IDENTIFICADOR_ASIG_NUMERO LLAB_CE ELSE LLAB_AB IDENTIFICADOR_ASIG_NUMERO LLAB_CE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOQUE_WHILE_IF ::= WHILE PARENT_AB OP_RELACIONAL_LOGICO PARENT_CE LLAB_AB IDENTIFICADOR_ASIG_NUMERO_OP BLOQUE_IF LLAB_CE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE_IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPRIMIR_NUMERO ::= PUTW PARENT_AB NUMERO PARENT_CE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NUMERO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPRIMIR_CADENA ::= PUTS PARENT_AB COMILLAIZQ IDENTIFICADOR COMILLADER PARENT_CE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_CADENA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPRIMIR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPRIMIR ::= IMPRIMIR_NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPRIMIR ::= IMPRIMIR_CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= TIPO_DATO_IDENTIFICADOR MAIN PARENT_AB PARENT_CE LLAB_AB IDENTIFICADOR_ASIG_NUMERO IMPRIMIR LLAB_CE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= TIPO_DATO_IDENTIFICADOR MAIN PARENT_AB PARENT_CE LLAB_AB IDENTIFICADOR_ASIG_NUMERO BLOQUE_WHILE_IF IMPRIMIR LLAB_CE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= TIPO_DATO_IDENTIFICADOR MAIN PARENT_AB PARENT_CE LLAB_AB IDENTIFICADOR_ASIG_NUMERO BLOQUE_IF IMPRIMIR LLAB_CE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= TIPO_DATO_IDENTIFICADOR MAIN PARENT_AB PARENT_CE LLAB_AB IDENTIFICADOR_ASIG_NUMERO BLOQUE_WHILE IMPRIMIR LLAB_CE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

