import java_cup.runtime.*;
import java.util.*;

action code {:
:}

parser code {:
	/* this part is included in the parser class */
	public static void main (String args[]) throws Exception{
		new parser(new Yylex(System.in)).parse();
	}
:}


/* Terminales */


/* Terminales operadores aritmeticos */
terminal MAS, MENOS, MULT, DIV;

/* Terminales operadores asignacion*/
terminal ASIG;

/* Terminales operadores delimitadores*/
terminal AP, CP, AL, CL;
terminal PYC;

/* Terminales operadores relacional*/
terminal EQUAL, NOTEQUAL, LT, GT;

/* Terminales operadores logico*/
terminal OR, AND;

/* Terminales operadores palabras reservadas*/
terminal IF, ELSE;
terminal WHILE;
terminal PUTW, PUTS;
terminal BREAK;
terminal String ID;
terminal INTEGER NUM;

/* No terminales */
non terminal Main main;
non terminal Block block;
non terminal VarLst var_lst;
non terminal StmtLst stmt_lst;
non terminal Statement statement;
non terminal Condition condition;
non terminal Expr expr, term, factor;

/* Precedencia */
precedence left AP, CP, AL, CL;
precedence left MULT, DIV, MAS, MENOS;
precedence left GT, LT, NOTEQUAL, EQUAL;
precedence left AND, OR;
precedence left ASIG;


/*  GRAMATICA  */


expr ::=
		  term:t
		  	{: RESULT = t; :}
		| PLUS term:t
			{: RESULT = t; :}
		| MINUS term:t
			{: RESULT = new InvExpr(t); :}
		| expr:e PLUS term:t
			{: RESULT = new PlusExpr(e,t); :}
		| expr:e MINUS term:t
			{: RESULT = new MinusExpr(e,t); :}
		;

term ::=
		  factor:f
		  	{: RESULT = f; :}
		| term:t MULT factor:f
			{: RESULT = new MultExpr(t,f); :}
		| term:t DIV factor:f
			{: RESULT = new DivExpr(t,f); :}
		;

factor ::=
		  ID:i
		  	{: RESULT = new ID(i); :}
		| INTEGER:i
			{: RESULT = new NUM(i); :}
		| AP expr:e CP
			{: RESULT = e; :}
		;